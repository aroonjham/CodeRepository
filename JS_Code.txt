// Starting with Javascript

"Aroon".length // returns length of "aroon"
"Batman".substring(0,3); //returns substring bat
"laptop".substring(3,6); //returns substring top

confirm('hello world. Click Ok to continue');
confirm('namaste world. Click Ok to continue'); // "confirm" returns dialog box

prompt("What is your name?"); // prompts user for input

console.log("Hello") //console.log() will take whatever is inside the parentheses and log it to the console below your code

/* Javascript list of boolean operators
//List of comparison operators:

  > Greater than
  < Less than
  <= Less than or equal to
  >= Greater than or equal to
  === Equal to
  !== Not equal to
*/

// FIRST CONDITIONAL STATEMENT USING IF/ELSE

//example 1
if (7*4 > 100 ) 
{
    console.log("Let's go down the first road!");
}
else 
{
    console.log("the other path is better");
}

//example 2

if (12 / 4 === "Ari".length) {
    confirm("Will this run the first block?");
} 
else 
{
    confirm("Or the second block?");
}


// WONDERFUL WORLD OF VARIABLES

var myName = "Aroon"; // use var to declare variables
var myAge = 30;
var isOdd = true;
console.log(myAge); // will print 30
console.log(myName.length); // will return 5

//Lets get a little more serious with a stupid little game that really deserves 0 stars ... but what the heck!!!

confirm("Are you ready to play?")

var age = prompt("what's your age");

if(age < 13)
{
    console.log("You may be a little young, but that's ok");
}
else
{
    console.log("have fun");
}

console.log("You are at a Justin Bieber concert, and you hear this lyric 'Lace my shoes off, start racing.'");
console.log("Suddenly, Bieber stops and says, 'Who wants to race me?'");
var userAnswer = prompt("Do you want to race Bieber on stage?");

if (userAnswer === "yes")
{
    console.log("You and Bieber start racing. It's neck and neck! You win by a shoelace!");
}
else
{
    console.log("Oh no! Bieber shakes his head and sings 'I set a pace, so I can race without pacing.'");
}

var feedback = prompt("rate my game please")

if (feedback > 8)
{
    console.log("Thank you! We should race at the next concert!")
}
else
{
    console.log("I'll keep practicing coding and racing.")
}


// AND NOW ITS TIME FOR FUNCTIONS IN JAVASCRIPT. THE HOLY GRAIL OF PROGRAMMING

// a simple function
//example 1
var dividebythree = function(number) {
	var val = number/3;
	console.log(val);
	};

dividebythree(6) // should return 2

//example 2
var greeting = function (name) {
    console.log("Great to see you," + " " + name);//We can join strings together using the plus sign (+)
};

greeting("Aroon") // returns Great to see you, Aroon

//example 3 uses return

var timesTwo = function(number) {
    return number * 2; //he return keyword simply gives the programmer back the value that comes out of the function
};

var newNumber = timesTwo(20)
console.log(newNumber); // prints 40 to the console

//example 4

var perimeterBox = function(l,w){
  return (2*l)+(2*w)  
};

console.log(perimeterBox(6,12))

// example 5

var isEven = function(number) {
  // If you call isNaN on something, it checks to see if that thing is not a number
  if (isNaN(number)){
      return "not a number";
  }
  
  else if (number % 2 === 0){
      return true;
  }
  
  else {
      return false;
  }
};

// Game of Rock paper and scissors. My first example of using conditional if/else and functions.

var userChoice = prompt("Do you choose rock, paper or scissors?");

var computerChoice = Math.random(); //Math.random() returns a value between 0 and 1

if (computerChoice < 0.34) {
	computerChoice = "rock";
} else if(computerChoice <= 0.67) {
	computerChoice = "paper";
} else {
	computerChoice = "scissors";
	} 
	
console.log("Computer: " + computerChoice);

var compare = function(choice1,choice2){
    if (choice1 === choice2) {
        return "The result is a tie!"
    }
    else if (choice1 === "rock") 
    {
        if (choice2 === "scissors")
        {
            return "rock wins"
        }
        else {
            return "paper wins"
        }
    }
    else if (choice1 === "paper")
    {
        if (choice2 === "rock"){
            return "paper wins"
        }
        else {
            return "scissors win"
        }
    }
    else {
        if (choice2 === "paper"){
            return "scissors wins"
        }
        else {
            return "rock wins"
        }
    }
};

compare(userChoice,computerChoice)


// FOR LOOPS. GO ON AND ON AND ON AND ON AND ON AND ON AND ON AND ON AND ON 

for (var i = 0; i < 36; i++) {
	console.log(i);
} // i++ is the same as i = i+1

/*
A  more efficient way to code to increment up by 1 is to write i++.
b. We decrement down by 1 by writing i--.
c. We can increment up by any value by writing i += x, where x is how much we want to increment up by. e.g., i += 3 counts up by 3s.
d. We can decrement down by any value by writing i -= x
*/

// A variable assigned just one number. So boring. Enter the fun world of Arrays. 2 is a company, more than 2 is a party

var junkData = ["Eddie Murphy", 49, "peanuts", 31];

console.log(junkData[3]) // returns the 4th value '31' from the array. A lot like python listStyleType

// looping through an array

var cities = ["Melbourne", "Amman", "Helsinki", "NYC"];

for (var i = 0; i < cities.length; i++) {
    console.log("I would like to visit " + cities[i]);
}

// example of a fairly complex conditional statements
// find name "Aroon" in a text

var text = "Hello Aroon, its so good to meet you. You know \
Aroon that the last time I saw you was in Austin. Wasnt it \
wonderful then Aroon?"; 

var myName = "Aroon";

var hits = []; // empty array hits.length will return 0

for (var i=0; i < text.length; i++){
    if(text[i]==="A"){
       for (var c=i; c < myName.length+i; c++){
       hits.push(text[c]); //push() method that adds the thing between parentheses to the end of the array
       } 
    }
}

if (hits.length === 0){
    console.log("Your name wasn't found!")
}
else {
    console.log(hits)
}

// this whole example above can be done more efficiently using the code below

var hits2 = text.match(/Aroon/g);

if (hits2.length === 0){
    "cant find your name"
}
else {
    console.log(hits2)
}

// AND WHILE WE ARE WAITING, DOING A LOOP IS POINTLESS CAUSE WE DONT KNOW HOW MUCH WHILE WILL THE WHILE BE

// the while conditional statement

//example 1. keep flipping till we get damn tails!!!

var coinFace = Math.floor(Math.random() * 2);

while(coinFace === 0){
	console.log("Heads! Flipping again...");
	var coinFace = Math.floor(Math.random() * 2);
}
console.log("Tails! Done flipping.");

//example 2. Interesting that we dont set variable "understand" to any value in the while loop

understand = true;

while(understand){
	console.log("I'm learning while loops!");
	understand = false //must add this to prevent the browser from crashing
}

//example 3: While looping, set your condition outside the loop.

var count = 0 //if you set counter inside the function, it will keep resetting to 0
var loop = function(){
    	while(count < 3){
		console.log("I'm looping!");
		count++
	}
};

loop();

// DO-WHILE ... A TWIST ON WHILE

//example1
var loopCondition = false;

do {
	console.log("I'm gonna stop looping 'cause my condition is " + loopCondition + "!");	
} while (loopCondition);

//example 2: with a hint of function

var i = 1
var getToDaChoppa = function(){
  do{
      console.log("Aroon is "+i)
      i++
  } while (i<10);
  
};

getToDaChoppa();


//grand example 3

var slaying = true;
var youHit = Math.floor(Math.random() * 2); // returns 1 or 0 interpreted by JS as T or F
var damageThisRound = Math.floor(Math.random() * 5 + 1);
var totalDamage = 0;

while (slaying) {
  if (youHit) {
    console.log("You hit the dragon and did " + damageThisRound + " damage!");
    totalDamage += damageThisRound;
    
    if (totalDamage >= 4) {
      console.log("You did it! You slew the dragon!");
      slaying = false;
    } else {
      youHit = Math.floor(Math.random() * 2);
    }
  } else {
    console.log("The dragon burninates you! You're toast.");
    slaying = false;
  }
}

//IF YOU HAVE TOO MANY IF ELSE, ELSE IF, AND MORE ELSE IF ... GO SIMPLE AND GET YOURSELF A SWITCH

var lunch = prompt("What do you want for lunch?","Type your lunch choice here"); // check out the prompt command ... very cool
lunch = lunch.toLowerCase() //convert all to lower case
switch(lunch){
  case 'sandwich':
    console.log("Sure thing! One sandwich, coming up.");
    break;
  case 'soup':
    console.log("Got it! Tomato's my favorite.");
    break;
  case 'salad':
    console.log("Sounds good! How about a caesar salad?");
    break;
  case 'pie':
    console.log("Pie's not a meal!");
    break;
  default:
    console.log("Huh! I'm not sure what " + lunch + " is. How does a sandwich sound?");
}

//example 2

var game = prompt("whats ur fav game","enter name here");

switch(game){
    case 'soccer':
        console.log("lots a legs");
        break;
    case 'football':
        console.log("lots a hurt");
        break;
    case 'tennis':
        console.log("like to volley")
        break;
    default:
        console.log("is that a game?")
}

//example 3

var user = prompt("Hello and welcome. What's your name?","enter name here").toUpperCase();

switch(user){
    case 'AROON':
        var feeling = prompt("Are you feeling great today?").toUpperCase();
        var weather = prompt("Is the weather great today?").toUpperCase();
        if(feeling === "YES" || weather === "YES"){
            console.log("Its great to see you master");
        }
        else {
            console.log("Have some soup master")
        }
        break;
    case 'NIHARIKA':
        var feeling = prompt("Are you feeling great today?").toUpperCase();
        var weather = prompt("Is the weather great today?").toUpperCase();
        if(feeling === "YES" || weather === "YES"){
            console.log("Its great to see you princess");
        }
        else {
            console.log("Have some chicken nuggets princess")
        }
        break;
    case 'MOMMY':
        var feeling = prompt("Are you feeling great today?").toUpperCase();
        var weather = prompt("Is the weather great today?").toUpperCase();
        if(feeling === "YES" && weather === "YES"){
            console.log("Its great to see you prime minister");
        }
        else {
            console.log("I am sorry prime minister")
        }
        break;
    default:
    console.log("Welcome stranger " + user)
}

/* boolean operators
&& - and
|| - or
! - not
*/

//example 1 of boolean

var iLoveJavaScript = true;
var iLoveLearning = true;

if(iLoveJavaScript && iLoveLearning) {
  // if iLoveJavaScript AND iLoveLearning:
  console.log("Awesome! Let's keep learning!");
} else if(!(iLoveJavaScript || iLoveLearning)) {
  // if NOT iLoveJavaScript OR iLoveLearning:
  console.log("Let's see if we can change your mind.");
} else {
  console.log("You only like one but not the other? We'll work on it.");
}

//example 2 showing the use of NOT

var programming = false;

var happy = function() {
  if(!programming){
      return true;
  }
  else {
      return false;
  }
};

//ARRAYS AND OBJECTS

var myArray = [27,true,"Aroon"] //heterogenous array
var newArray = [["name","place","thing"],["Aroon","Austin","Eraser"],["Karish","Mumbai","Pencil"]] // array of arrays
var jagged = [["name","place","thing"],["Aroon","Austin"],["Karish","Mumbai","Pencil"]] // jagged array


// objects in action. Objects are like dictionaries in python. Key-value pairs

//example 1: various ways to create an object

//method 1 using a constructor
var bob = new Object();
bob.name = "Bob Smith";
bob.age = 30;

//method 2 using curly brackets
var susan1 = {
  name: "Susan Jordan",
  age: 24
};

var susan2 = new Object();
susan2.name = "Susan Jordan";
susan2.age = 24;

//example 2 illustrates methods and properties
var phonebookEntry = {}; //empty object

phonebookEntry.name = 'Oxnard Montalvo'; //adding property .name to the object
phonebookEntry.number = '(555) 555-5555';
phonebookEntry.phone = function() {
  console.log('Calling ' + this.name + ' at ' + this.number + '...');
};

phonebookEntry.phone(); //accesses the "method called phone" of phonebookEntry object
phonebookEntry.number // accesses the "property called number" of phonebookEntry object

// so we have learnt strings, numbers, objects and arrays. Lets learn about 'typeof'

var anObj = { job: "I'm an object!" };
var aNumber = 42;
var aString = "I'm a string!";
var junkData = ["Eddie Murphy", 49, "peanuts", 31];

console.log( typeof anObj ); // should print "object"
console.log( typeof aNumber ); // should print "number"
console.log( typeof aString ); // should print "string"
console.log( typeof junkData); // should print "object"

// objects in an array

var myObj = {
    city: 'Austin',
    age: 24,
}
var myArray = [24,true,"aroon",myObj]

// array in an object

var myObject = {
  name: 'Eduardo',
  type: 'Most excellent',
  interests: ['Coding','Gaming'],
  };
  
 // objects in objects

var friends = {};
friends.bill = {
  firstName: "Bill",
  lastName: "Gates",
  number: "(206) 555-5555",
  address: ['One Microsoft Way','Redmond','WA','98052']
};
friends.steve = {
  firstName: "Steve",
  lastName: "Jobs",
  number: "(408) 555-5555",
  address: ['1 Infinite Loop','Cupertino','CA','95014']
};

// the code below is a great example on how to extract names of object properties. (think like extracting name of the key from a key-value pair).
var list = function(obj) {
  for(var prop in obj) {
    console.log(prop);
  }
};
// the code below is a great example on how to extract properties from objects. (think like extracting values from keys.
var search = function(name) {
  for(var prop in friends) {
    if(friends[prop].firstName === name) {
      console.log(friends[prop]);
      return friends[prop];
    }
  }
};

list(friends);
search("Steve"); 

//methods in objects

//example 1
var bob = new Object();
bob.name = "Bob Smith";
bob.age = 30;

bob.setAge = function (newAge){
  bob.age = newAge;
};

bob.setAge(40);

bob.setAge(20) // bob's feeling old.  Use our method to set bob's age to 20

//example 2 ... uses some date methods 

var bob = new Object();
bob.age = 17;

bob.setAge = function (newAge){
  bob.age = newAge;
};

bob.getYearOfBirth = function () {
  return new Date().getFullYear() - bob.age; //new Date() gets current date. getFullYear() extracts YYYY
};
console.log(bob.getYearOfBirth());
/* other date methods
.getMonth()+1 ... gets month. Jan is 0, therefore +1
.getDate() ... gets the day */

//example 3 ... use of 'this' keyword

// lets first establish a function using keyword 'this'
var setAge = function (newAge) {
  this.age = newAge;
};
// now lets make an object
var bob = new Object();
bob.age = 30;
bob.setAge = setAge; // here, we create a method for bob that uses function setAge. The use of 'this' allows any object (bob in this case) to use the function

bob.setAge(50); // calls setAge method for bob object. setAge method for object is linked to setAge function. 

// objects by default have no properties
// YOU CAN CREATE YOUR CUSTOM OBJECT BY USING CUSTOM CONSTRUCTORS

//example of creating a person object

function Person(name,age) {
  this.name = name;
  this.age = age;
  this.species = "Homo Sapiens";
}

var bob = new Person("Bob Smith", 30);
var susan = new Person("Susan Jordan", 25);
var george = new Person("George Washington",275)

//another example

function Rectangle(height, width) {
  this.height = height;
  this.width = width;
  this.calcArea = function() {
      return this.height * this.width;
  };
  this.calcPerimeter = function(){
      return this.height * 2 + this.width * 2;
  };
  
}

var rex = new Rectangle(7,3);
var area = rex.calcArea();
var perimeter = rex.calcPerimeter();

console.log(area, perimeter)

//another example now using arrays

function Person (name, age) {
    this.name = name;
    this.age = age;
}

// Now we can make an array of people
var family = new Array();
family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);
family[3] = new Person("timmy",6);

// and using a loop extract names and ages of people in the family array surgically

for (i in family){
    console.log(family[i].name + " is " + family[i].age + " years old");
}

// back to functions ... and now we pass an object to a function

var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
}

var alice = new Person("Alice", 30);
var billy = new Person("Billy", 25);

// get the difference in age between alice and billy using our function
var diff = ageDifference(alice,billy)

// Make a new function, olderAge, to return the name of
// the older of two people
var olderAge = function(obj1, obj2){
    if(obj1.age > obj2.age){
        return obj1.name;
    }
    else {
        return obj2.name
    }
}

console.log("The older person is " + olderAge(alice, billy));

//bringing it all together ... kind of summary

//create object bob
var bob = {
    firstName: "Bob",
    lastName: "Jones",
    phoneNumber: "(650) 777-7777",
    email: "bob.jones@example.com"
};

//create object mary another way
var mary = new Object();
mary.firstName = "Mary";
mary.lastName = "Johnson";
mary.phoneNumber = "(650) 888-8888";
mary.email = "mary.j@example.com";

//add bob and marry to an array
var contacts = [bob, mary];

//create a function that takes an array as an input and outputs firstname + lastname
function printPerson(person) {
    console.log(person.firstName + " " + person.lastName);
}

//create a list function that take no input
function list() {
	var contactsLength = contacts.length;
	for (var i = 0; i < contactsLength; i++) {
		printPerson(contacts[i]);
	}
}

//Create a search function 

function search(lastName){
    var max = contacts.length;
    for (var i = 0 ; i<max ; i++){
        if(contacts[i].lastName === lastName){
            printPerson(contacts[i]);
        }
    }
}

search("Jones")

// create a custom object called add, that create a new contact
function add(firstName, lastName, email, phoneNumber){
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.phoneNumber = phoneNumber;
};

// use the new custom object
var aroon = new add("Aroon","Jham","AJ@example.com","512-222-2222")

//add that object to an array
contacts.push(aroon)

// list all objects in an array
list()

// every object in JavaScript comes with a method called hasOwnProperty
console.log(mary.hasOwnProperty('firstName')) ; //should return true
console.log(mary.hasOwnProperty('Name')) ; //should return false

// we created a custom object. But want if I wanted to add a new property or method to that custom object
// enter 'prototype' to the rescue

//adding a new method to add function
add.prototype.fullName = function(){
	console.log(this.firstName + " " + this.lastName);
};

//adding a new property
add.prototype.workNumber = function(wn){
    this.workNumber = wn
}


aroon.workNumber("512-333-1111") //adds work number to the object
aroon.fullName() //prints full name

console.log(aroon)

//lets create a new object that inherits from object 'add' with a constant email address

function add2(firstName, lastName, phoneNumber){
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = "admin@email.com";
    this.phoneNumber = phoneNumber;
}

add2.prototype = new add(); //this line ensures that add2, inherits from add

// but all of 'this' information is public. What if we need to keep a property private

function add(firstName, lastName, email, phoneNumber, salary){
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.phoneNumber = phoneNumber;
	var salary = salary; //keep private by using 'var' 
};

// so - how do we return this private information?

function add(firstName, lastName, email, phoneNumber, salary){
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.phoneNumber = phoneNumber;
	var salary = salary; 
	this.showSalary = function(){ 
		return salary;
	}
};

// now we get real fancy with our showSalary method.

function add(firstName, lastName, email, phoneNumber, salary){
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.phoneNumber = phoneNumber;
	var salary = salary; 
	this.showSalary = function(pw){ 
		if(pw === 1234) return salary;
		else return "wrong password";
	};
};

//another fancy example - a cash register

//first we need some employees for employee discount. lets build the employee object
function StaffMember(name,discountPercent){
    this.name = name;
    this.discountPercent = discountPercent;
}
//lets add some employees
var sally = new StaffMember("Sally",5);
var bob = new StaffMember("Bob",10);
var me = new StaffMember("AJ",20);

//now lets build the cashregister object with many properties and methods
var cashRegister = {
    total:0,
    lastTransactionAmount: 0,
    add: function(itemCost){
        this.total += (itemCost || 0);
        this.lastTransactionAmount = itemCost;
    },
    scan: function(item,quantity){
        switch (item){
        case "eggs": this.add(0.98 * quantity); break;
        case "milk": this.add(1.23 * quantity); break;
        case "magazine": this.add(4.99 * quantity); break;
        case "chocolate": this.add(0.45 * quantity); break;
        }
        return true;
    },
    voidLastTransaction : function(){
        this.total -= this.lastTransactionAmount;
        this.lastTransactionAmount = 0;
    },
    // Create a new method applyStaffDiscount here
    applyStaffDiscount: function(employee){
        var percent = 1 - (employee.discountPercent/100);
        this.total = this.total*percent;
    },
    
};

// lets put the cash register in action
cashRegister.scan('eggs',1);
cashRegister.scan('milk',1);
cashRegister.scan('magazine',3);
// Apply your staff discount by passing the 'me' object 
// to applyStaffDiscount
cashRegister.applyStaffDiscount(me)

// Show the total bill
console.log('Your bill is '+cashRegister.total.toFixed(2));